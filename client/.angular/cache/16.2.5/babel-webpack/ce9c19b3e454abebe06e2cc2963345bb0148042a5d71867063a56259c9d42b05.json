{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nimport * as i2 from \"ngx-toastr\";\nexport class AdminGuard {\n  constructor(accountService, toastr) {\n    this.accountService = accountService;\n    this.toastr = toastr;\n  }\n  canActivate() {\n    return this.accountService.currentUser$.pipe(map(user => {\n      if (user.roles.includes('Admin') || user.roles.includes('Moderator')) {\n        return true;\n      }\n      this.toastr.error('You cannot enter this area');\n    }));\n  }\n  static #_ = this.ɵfac = function AdminGuard_Factory(t) {\n    return new (t || AdminGuard)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.ToastrService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminGuard,\n    factory: AdminGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","AdminGuard","constructor","accountService","toastr","canActivate","currentUser$","pipe","user","roles","includes","error","_","i0","ɵɵinject","i1","AccountService","i2","ToastrService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\BongumusaN\\TestingApp\\client\\src\\app\\_guards\\admin.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AccountService } from '../_services/account.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminGuard  {\r\n  constructor(private accountService: AccountService, private toastr: ToastrService ){\r\n\r\n  }\r\n  canActivate(): Observable<boolean> {\r\n    return this.accountService.currentUser$.pipe(\r\n      map(user =>{\r\n        if (user.roles.includes('Admin') || user.roles.includes('Moderator')){\r\n          return true;\r\n        }\r\n        this.toastr.error('You cannot enter this area');\r\n      })\r\n    );\r\n  }\r\n  \r\n}\r\n"],"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAMpC,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,cAA8B,EAAUC,MAAqB;IAA7D,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;EAElE;EACAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,cAAc,CAACG,YAAY,CAACC,IAAI,CAC1CP,GAAG,CAACQ,IAAI,IAAG;MACT,IAAIA,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAIF,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAC;QACnE,OAAO,IAAI;;MAEb,IAAI,CAACN,MAAM,CAACO,KAAK,CAAC,4BAA4B,CAAC;IACjD,CAAC,CAAC,CACH;EACH;EAAC,QAAAC,CAAA,G;qBAbUX,UAAU,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVlB,UAAU;IAAAmB,OAAA,EAAVnB,UAAU,CAAAoB,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}