{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./presence.service\";\nexport class AccountService {\n  constructor(http, presenceService) {\n    this.http = http;\n    this.presenceService = presenceService;\n    this.baseUrl = environment.apiUrl;\n    this.currentUserSource = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSource.asObservable();\n  }\n  login(model) {\n    return this.http.post(this.baseUrl + 'account/login', model).pipe(map(response => {\n      const user = response;\n      if (user) {\n        this.setCurrentUser(user);\n      }\n    }));\n  }\n  register(model) {\n    return this.http.post(this.baseUrl + 'account/register', model).pipe(map(response => {\n      const user = response;\n      if (user) {\n        this.setCurrentUser(user);\n      }\n    }));\n  }\n  setCurrentUser(user) {\n    user.roles = [];\n    const roles = this.getDecodedToken(user.token).role;\n    Array.isArray(roles) ? user.roles = roles : user.roles.push(roles);\n    localStorage.setItem('user', JSON.stringify(user));\n    this.currentUserSource.next(user);\n    this.presenceService.createHubConnection(user);\n  }\n  logout() {\n    localStorage.removeItem('user');\n    this.currentUserSource.next(null);\n    this.presenceService.stopHubConnection();\n  }\n  getDecodedToken(token) {\n    return JSON.parse(atob(token.split('.')[1]));\n  }\n  static #_ = this.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.PresenceService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","map","environment","AccountService","constructor","http","presenceService","baseUrl","apiUrl","currentUserSource","currentUser$","asObservable","login","model","post","pipe","response","user","setCurrentUser","register","roles","getDecodedToken","token","role","Array","isArray","push","localStorage","setItem","JSON","stringify","next","createHubConnection","logout","removeItem","stopHubConnection","parse","atob","split","_","i0","ɵɵinject","i1","HttpClient","i2","PresenceService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\BongumusaN\\TestingApp\\client\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, map } from 'rxjs';\r\nimport { User } from '../_models/user';\r\nimport { environment } from 'src/environments/environment';\r\nimport { PresenceService } from './presence.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccountService {\r\n  baseUrl = environment.apiUrl;\r\n  private currentUserSource = new BehaviorSubject<User | null>(null);\r\n  currentUser$ = this.currentUserSource.asObservable();\r\n\r\n  constructor(private http: HttpClient, private presenceService: PresenceService) { }\r\n\r\n  login(model: any) {\r\n    return this.http.post<User>(this.baseUrl + 'account/login', model).pipe(\r\n      map((response: User) => {\r\n        const user = response;\r\n        if (user) {\r\n          this.setCurrentUser(user);\r\n        }\r\n      })\r\n    )\r\n  }\r\n\r\n  register(model: any) {\r\n    return this.http.post<User>(this.baseUrl + 'account/register', model).pipe(\r\n      map(response => {\r\n        const user = response;\r\n        if (user) {\r\n          this.setCurrentUser(user);\r\n        }\r\n      })\r\n    )\r\n  }\r\n\r\n  setCurrentUser(user: User) {\r\n    user.roles = [];\r\n    const roles = this.getDecodedToken(user.token).role;\r\n    Array.isArray(roles) ? user.roles = roles : user.roles.push(roles);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    this.currentUserSource.next(user);\r\n    this.presenceService.createHubConnection(user);\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('user');\r\n    this.currentUserSource.next(null);\r\n    this.presenceService.stopHubConnection();\r\n  }\r\n\r\n  getDecodedToken(token: string) {\r\n    return JSON.parse(atob(token.split('.')[1]));\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,eAAe,EAAEC,GAAG,QAAQ,MAAM;AAE3C,SAASC,WAAW,QAAQ,8BAA8B;;;;AAM1D,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,IAAgB,EAAUC,eAAgC;IAA1D,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,eAAe,GAAfA,eAAe;IAJ7D,KAAAC,OAAO,GAAGL,WAAW,CAACM,MAAM;IACpB,KAAAC,iBAAiB,GAAG,IAAIT,eAAe,CAAc,IAAI,CAAC;IAClE,KAAAU,YAAY,GAAG,IAAI,CAACD,iBAAiB,CAACE,YAAY,EAAE;EAE8B;EAElFC,KAAKA,CAACC,KAAU;IACd,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAO,IAAI,CAACP,OAAO,GAAG,eAAe,EAAEM,KAAK,CAAC,CAACE,IAAI,CACrEd,GAAG,CAAEe,QAAc,IAAI;MACrB,MAAMC,IAAI,GAAGD,QAAQ;MACrB,IAAIC,IAAI,EAAE;QACR,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC;;IAE7B,CAAC,CAAC,CACH;EACH;EAEAE,QAAQA,CAACN,KAAU;IACjB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAO,IAAI,CAACP,OAAO,GAAG,kBAAkB,EAAEM,KAAK,CAAC,CAACE,IAAI,CACxEd,GAAG,CAACe,QAAQ,IAAG;MACb,MAAMC,IAAI,GAAGD,QAAQ;MACrB,IAAIC,IAAI,EAAE;QACR,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC;;IAE7B,CAAC,CAAC,CACH;EACH;EAEAC,cAAcA,CAACD,IAAU;IACvBA,IAAI,CAACG,KAAK,GAAG,EAAE;IACf,MAAMA,KAAK,GAAG,IAAI,CAACC,eAAe,CAACJ,IAAI,CAACK,KAAK,CAAC,CAACC,IAAI;IACnDC,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,GAAGH,IAAI,CAACG,KAAK,GAAGA,KAAK,GAAGH,IAAI,CAACG,KAAK,CAACM,IAAI,CAACN,KAAK,CAAC;IAClEO,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC,CAAC;IAClD,IAAI,CAACR,iBAAiB,CAACsB,IAAI,CAACd,IAAI,CAAC;IACjC,IAAI,CAACX,eAAe,CAAC0B,mBAAmB,CAACf,IAAI,CAAC;EAChD;EAEAgB,MAAMA,CAAA;IACJN,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACzB,iBAAiB,CAACsB,IAAI,CAAC,IAAI,CAAC;IACjC,IAAI,CAACzB,eAAe,CAAC6B,iBAAiB,EAAE;EAC1C;EAEAd,eAAeA,CAACC,KAAa;IAC3B,OAAOO,IAAI,CAACO,KAAK,CAACC,IAAI,CAACf,KAAK,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C;EAAC,QAAAC,CAAA,G;qBA9CUpC,cAAc,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,eAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd3C,cAAc;IAAA4C,OAAA,EAAd5C,cAAc,CAAA6C,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}