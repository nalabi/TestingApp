{"ast":null,"code":"import { HubConnectionBuilder } from '@microsoft/signalr';\nimport { environment } from 'src/environments/environment';\nimport { BehaviorSubject, take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"@angular/router\";\nexport class PresenceService {\n  constructor(toastr, router) {\n    this.toastr = toastr;\n    this.router = router;\n    this.hubUrl = environment.hubUrl;\n    this.onlineUsersSource = new BehaviorSubject([]);\n    this.onlineUsers$ = this.onlineUsersSource.asObservable();\n  }\n  createHubConnection(user) {\n    this.hubConnection = new HubConnectionBuilder().withUrl(this.hubUrl + 'presence', {\n      accessTokenFactory: () => user.token\n    }).withAutomaticReconnect().build();\n    this.hubConnection.start().catch(error => console.log(error));\n    this.hubConnection.on('UserIsOnline', username => {\n      this.onlineUsers$.pipe(take(1)).subscribe({\n        next: usernames => this.onlineUsersSource.next([...usernames, username])\n      });\n    });\n    this.hubConnection.on('UserIsOffline', username => {\n      this.onlineUsers$.pipe(take(1)).subscribe({\n        next: usernames => this.onlineUsersSource.next([...usernames.filter(x => x !== username)])\n      });\n    });\n    this.hubConnection.on('GetOnlineUsers', usernames => {\n      this.onlineUsersSource.next(usernames);\n    });\n    this.hubConnection.on('NewMessageReceived', ({\n      username,\n      knownAs\n    }) => {\n      this.toastr.info(knownAs + ' has sent you a new message! Click me to see it!').onTap.pipe(take(1)).subscribe(() => this.router.navigateByUrl('/members/' + username + '?tab=Messages'));\n    });\n  }\n  stopHubConnection() {\n    this.hubConnection?.stop().catch(error => console.log(error));\n  }\n  static #_ = this.ɵfac = function PresenceService_Factory(t) {\n    return new (t || PresenceService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PresenceService,\n    factory: PresenceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HubConnectionBuilder","environment","BehaviorSubject","take","PresenceService","constructor","toastr","router","hubUrl","onlineUsersSource","onlineUsers$","asObservable","createHubConnection","user","hubConnection","withUrl","accessTokenFactory","token","withAutomaticReconnect","build","start","catch","error","console","log","on","username","pipe","subscribe","next","usernames","filter","x","knownAs","info","onTap","navigateByUrl","stopHubConnection","stop","_","i0","ɵɵinject","i1","ToastrService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\BongumusaN\\TestingApp\\client\\src\\app\\_services\\presence.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { environment } from 'src/environments/environment';\r\nimport { User } from '../_models/user';\r\nimport { BehaviorSubject, take } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PresenceService {\r\n  hubUrl = environment.hubUrl;\r\n  private hubConnection?: HubConnection;\r\n  private onlineUsersSource = new BehaviorSubject<string[]>([]);\r\n  onlineUsers$ = this.onlineUsersSource.asObservable();\r\n\r\n  constructor(private toastr: ToastrService, private router: Router) { }\r\n\r\n  createHubConnection(user: User) {\r\n    this.hubConnection = new HubConnectionBuilder()\r\n      .withUrl(this.hubUrl + 'presence', {\r\n        accessTokenFactory: () => user.token\r\n      })\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    this.hubConnection\r\n      .start()\r\n      .catch(error => console.log(error));\r\n\r\n    this.hubConnection.on('UserIsOnline', username => {\r\n      this.onlineUsers$.pipe(take(1)).subscribe({\r\n        next: usernames => this.onlineUsersSource.next([...usernames, username])\r\n      })\r\n    })\r\n\r\n    this.hubConnection.on('UserIsOffline', username => {\r\n      this.onlineUsers$.pipe(take(1)).subscribe({\r\n        next: usernames => this.onlineUsersSource.next([...usernames.filter(x => x !== username)])\r\n      })\r\n    })\r\n\r\n    this.hubConnection.on('GetOnlineUsers', usernames => {\r\n      this.onlineUsersSource.next(usernames);\r\n    })\r\n\r\n    this.hubConnection.on('NewMessageReceived', ({ username, knownAs }) => {\r\n      this.toastr.info(knownAs + ' has sent you a new message! Click me to see it!')\r\n        .onTap\r\n        .pipe(take(1))\r\n        .subscribe(() => this.router.navigateByUrl('/members/' + username + '?tab=Messages'))\r\n    })\r\n  }\r\n\r\n  stopHubConnection() {\r\n    this.hubConnection?.stop().catch(error => console.log(error));\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}