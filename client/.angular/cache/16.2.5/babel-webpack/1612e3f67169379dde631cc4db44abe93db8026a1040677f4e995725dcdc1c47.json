{"ast":null,"code":"import { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nexport class JwtInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    let currentUser;\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => currentUser = user);\n    if (currentUser) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["take","JwtInterceptor","constructor","accountService","intercept","request","next","currentUser","currentUser$","pipe","subscribe","user","clone","setHeaders","Authorization","token","handle","_","i0","ɵɵinject","i1","AccountService","_2","factory","ɵfac"],"sources":["C:\\Users\\BongumusaN\\TestingApp\\client\\src\\app\\_interceptors\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AccountService } from '../_services/account.service';\r\nimport { User } from '../_models/user';\r\nimport { take } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private accountService: AccountService) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    let currentUser: User;\r\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => currentUser = user);\r\n    if(currentUser){\r\n      request = request.clone({\r\n        setHeaders:{\r\n          Authorization: `Bearer ${currentUser.token}`\r\n        }\r\n      })\r\n    }\r\n    return next.handle(request);\r\n  }\r\n}\r\n"],"mappings":"AAUA,SAASA,IAAI,QAAQ,gBAAgB;;;AAGrC,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAmB;EAErDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAIC,WAAiB;IACrB,IAAI,CAACJ,cAAc,CAACK,YAAY,CAACC,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC,CAACU,SAAS,CAACC,IAAI,IAAIJ,WAAW,GAAGI,IAAI,CAAC;IACpF,IAAGJ,WAAW,EAAC;MACbF,OAAO,GAAGA,OAAO,CAACO,KAAK,CAAC;QACtBC,UAAU,EAAC;UACTC,aAAa,EAAE,UAAUP,WAAW,CAACQ,KAAK;;OAE7C,CAAC;;IAEJ,OAAOT,IAAI,CAACU,MAAM,CAACX,OAAO,CAAC;EAC7B;EAAC,QAAAY,CAAA,G;qBAfUhB,cAAc,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdrB,cAAc;IAAAsB,OAAA,EAAdtB,cAAc,CAAAuB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}