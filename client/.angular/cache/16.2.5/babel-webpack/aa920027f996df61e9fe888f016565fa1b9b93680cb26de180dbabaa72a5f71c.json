{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/BongumusaN/TestingApp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport { BehaviorSubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./busy.service\";\nexport class MessageService {\n  constructor(http, busyService) {\n    this.http = http;\n    this.busyService = busyService;\n    this.baseUrl = environment.apiUrl;\n    this.hubUrl = environment.hubUrl;\n    this.messageThreadSource = new BehaviorSubject([]);\n    this.messageThread$ = this.messageThreadSource.asObservable();\n  }\n  createHubConnection(user, otherUsername) {\n    this.busyService.busy();\n    this.hubConnection = new HubConnectionBuilder().withUrl(this.hubUrl + 'message?user=' + otherUsername, {\n      accessTokenFactory: () => user.token\n    }).withAutomaticReconnect().build();\n    this.hubConnection.start().catch(error => console.log(error)).finally(() => this.busyService.idle());\n    this.hubConnection.on('ReceiveMessageThread', messages => {\n      this.messageThreadSource.next(messages);\n    });\n    this.hubConnection.on('NewMessage', message => {\n      this.messageThread$.pipe(take(1)).subscribe(messages => {\n        this.messageThreadSource.next([...messages, message]);\n      });\n    });\n    this.hubConnection.on('UpdatedGroup', group => {\n      if (group.connections.some(x => x.username === otherUsername)) {\n        this.messageThread$.pipe(take(1)).subscribe(messages => {\n          messages.forEach(message => {\n            if (!message.dateRead) {\n              message.dateRead = new Date(Date.now());\n            }\n          });\n          this.messageThreadSource.next([...messages]);\n        });\n      }\n    });\n  }\n  stopHubConnection() {\n    if (this.hubConnection) {\n      this.messageThreadSource.next([]);\n      this.hubConnection.stop();\n    }\n  }\n  getMessages(pageNumber, pageSize, container) {\n    let params = getPaginationHeaders(pageNumber, pageSize);\n    params = params.append('Container', container);\n    return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\n  }\n  getMessageThread(username) {\n    return this.http.get(this.baseUrl + 'messages/thread/' + username);\n  }\n  sendMessage(username, content) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return _this.hubConnection.invoke('SendMessage', {\n        recipientUsername: username,\n        content\n      }).catch(error => console.log(error));\n    })();\n  }\n  deleteMessage(id) {\n    return this.http.delete(this.baseUrl + 'messages/' + id);\n  }\n  static #_ = this.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.BusyService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HubConnectionBuilder","BehaviorSubject","take","environment","getPaginatedResult","getPaginationHeaders","MessageService","constructor","http","busyService","baseUrl","apiUrl","hubUrl","messageThreadSource","messageThread$","asObservable","createHubConnection","user","otherUsername","busy","hubConnection","withUrl","accessTokenFactory","token","withAutomaticReconnect","build","start","catch","error","console","log","finally","idle","on","messages","next","message","pipe","subscribe","group","connections","some","x","username","forEach","dateRead","Date","now","stopHubConnection","stop","getMessages","pageNumber","pageSize","container","params","append","getMessageThread","get","sendMessage","content","_this","_asyncToGenerator","invoke","recipientUsername","deleteMessage","id","delete","_","i0","ɵɵinject","i1","HttpClient","i2","BusyService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\BongumusaN\\TestingApp\\client\\src\\app\\_services\\message.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Group } from '../_models/group';\r\nimport { Message } from '../_models/message';\r\nimport { User } from '../_models/user';\r\nimport { BusyService } from './busy.service';\r\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n  baseUrl = environment.apiUrl;\r\n  hubUrl = environment.hubUrl;\r\n  private hubConnection: HubConnection;\r\n  private messageThreadSource = new BehaviorSubject<Message[]>([]);\r\n  messageThread$ = this.messageThreadSource.asObservable();\r\n\r\n  constructor(private http: HttpClient, private busyService: BusyService) { }\r\n\r\n  createHubConnection(user: User, otherUsername: string) {\r\n    this.busyService.busy();\r\n    this.hubConnection = new HubConnectionBuilder()\r\n      .withUrl(this.hubUrl + 'message?user=' + otherUsername, {\r\n        accessTokenFactory: () => user.token\r\n      })\r\n      .withAutomaticReconnect()\r\n      .build()\r\n\r\n    this.hubConnection.start()\r\n      .catch(error => console.log(error))\r\n      .finally(() => this.busyService.idle());\r\n\r\n    this.hubConnection.on('ReceiveMessageThread', messages => {\r\n      this.messageThreadSource.next(messages);\r\n    })\r\n\r\n    this.hubConnection.on('NewMessage', message => {\r\n      this.messageThread$.pipe(take(1)).subscribe(messages => {\r\n        this.messageThreadSource.next([...messages, message])\r\n      })\r\n    })\r\n\r\n    this.hubConnection.on('UpdatedGroup', (group: Group) => {\r\n      if (group.connections.some(x => x.username === otherUsername)) {\r\n        this.messageThread$.pipe(take(1)).subscribe(messages => {\r\n          messages.forEach(message => {\r\n            if (!message.dateRead) {\r\n              message.dateRead = new Date(Date.now())\r\n            }\r\n          })\r\n          this.messageThreadSource.next([...messages]);\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  stopHubConnection() {\r\n    if (this.hubConnection) {\r\n      this.messageThreadSource.next([]);\r\n      this.hubConnection.stop();\r\n    }\r\n  }\r\n\r\n  getMessages(pageNumber, pageSize, container) {\r\n    let params = getPaginationHeaders(pageNumber, pageSize);\r\n    params = params.append('Container', container);\r\n    return getPaginatedResult<Message[]>(this.baseUrl + 'messages', params, this.http);\r\n  }\r\n\r\n  getMessageThread(username: string) {\r\n    return this.http.get<Message[]>(this.baseUrl + 'messages/thread/' + username);\r\n  }\r\n\r\n  async sendMessage(username: string, content: string) {\r\n    return this.hubConnection.invoke('SendMessage', {recipientUsername: username, content})\r\n      .catch(error => console.log(error));\r\n  }\r\n\r\n  deleteMessage(id: number) {\r\n    return this.http.delete(this.baseUrl + 'messages/' + id);\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}