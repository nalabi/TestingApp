{"ast":null,"code":"import { take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nexport class JwtInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    this.accountService.currentUser$.pipe(take(1)).subscribe({\n      next: user => {\n        if (user) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `Bearer ${user.token}`\n            }\n          });\n        }\n      }\n    });\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["take","JwtInterceptor","constructor","accountService","intercept","request","next","currentUser$","pipe","subscribe","user","clone","setHeaders","Authorization","token","handle","_","i0","ɵɵinject","i1","AccountService","_2","factory","ɵfac"],"sources":["C:\\Users\\BongumusaN\\TestingApp\\client\\src\\app\\_interceptors\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable, take } from 'rxjs';\r\nimport { AccountService } from '../_services/account.service';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private accountService: AccountService) { }\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    this.accountService.currentUser$.pipe(take(1)).subscribe({\r\n      next: user => {\r\n        if (user) {\r\n          request = request.clone({\r\n            setHeaders: {\r\n              Authorization: `Bearer ${user.token}`\r\n            }\r\n          })\r\n        }\r\n      }\r\n    })\r\n    return next.handle(request);\r\n  }\r\n}\r\n"],"mappings":"AAOA,SAAqBA,IAAI,QAAQ,MAAM;;;AAIvC,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAoB;EAEtDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAI,CAACH,cAAc,CAACI,YAAY,CAACC,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,CAACS,SAAS,CAAC;MACvDH,IAAI,EAAEI,IAAI,IAAG;QACX,IAAIA,IAAI,EAAE;UACRL,OAAO,GAAGA,OAAO,CAACM,KAAK,CAAC;YACtBC,UAAU,EAAE;cACVC,aAAa,EAAE,UAAUH,IAAI,CAACI,KAAK;;WAEtC,CAAC;;MAEN;KACD,CAAC;IACF,OAAOR,IAAI,CAACS,MAAM,CAACV,OAAO,CAAC;EAC7B;EAAC,QAAAW,CAAA,G;qBAjBUf,cAAc,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdpB,cAAc;IAAAqB,OAAA,EAAdrB,cAAc,CAAAsB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}