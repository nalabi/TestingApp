{"ast":null,"code":"import { RolesModalComponent } from 'src/app/modals/roles-modal/roles-modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/_services/admin.service\";\nimport * as i2 from \"ngx-bootstrap/modal\";\nimport * as i3 from \"@angular/common\";\nfunction UserManagementComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function UserManagementComponent_tr_8_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const user_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.openRolesModal(user_r1));\n    });\n    i0.ɵɵtext(7, \"Edit Roles\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const user_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r1.username);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", user_r1.roles, \"\");\n  }\n}\nexport class UserManagementComponent {\n  constructor(adminService, modalService) {\n    this.adminService = adminService;\n    this.modalService = modalService;\n  }\n  ngOnInit() {\n    this.getUsersWithRoles();\n  }\n  getUsersWithRoles() {\n    this.adminService.getUserWithRoles().subscribe(users => {\n      this.users = users;\n    });\n  }\n  openRolesModal(user) {\n    const config = {\n      class: 'modal-dialog-centered',\n      initialState: {\n        user,\n        roles: this.getRolesArray(user)\n      }\n    };\n    this.bsModalRef = this.modalService.show(RolesModalComponent, config);\n    this.bsModalRef.content.updateSelectedRoles.subscribe(values => {\n      const rolesToUpdate = {\n        roles: [...values.filter(el => el.checked === true).map(el => el.name)]\n      };\n      if (rolesToUpdate) {\n        this.adminService.updateUserRoles(user.username, rolesToUpdate.roles).subscribe(() => {\n          user.roles = [...rolesToUpdate.roles];\n        });\n      }\n    });\n  }\n  getRolesArray(user) {\n    const roles = [];\n    const userRoles = user.roles;\n    const availableRoles = [{\n      name: 'Admin',\n      value: 'Admin'\n    }, {\n      name: 'Moderator',\n      value: 'Moderator'\n    }, {\n      name: 'Member',\n      value: 'Member'\n    }];\n    availableRoles.forEach(role => {\n      let isMatch = false;\n      for (const userRole of userRoles) {\n        if (role.name === userRole) {\n          isMatch = true;\n          role.checked = true;\n          roles.push(role);\n          break;\n        }\n      }\n      if (!isMatch) {\n        role.checked = false;\n        roles.push(role);\n      }\n    });\n    return roles;\n  }\n  static #_ = this.ɵfac = function UserManagementComponent_Factory(t) {\n    return new (t || UserManagementComponent)(i0.ɵɵdirectiveInject(i1.AdminService), i0.ɵɵdirectiveInject(i2.BsModalService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UserManagementComponent,\n    selectors: [[\"app-user-management\"]],\n    decls: 9,\n    vars: 1,\n    consts: [[1, \"row\"], [1, \"table\"], [2, \"width\", \"30%\"], [2, \"width\", \"40%\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-info\", 3, \"click\"]],\n    template: function UserManagementComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"th\", 2);\n        i0.ɵɵtext(4, \" Username \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"th\", 3);\n        i0.ɵɵtext(6, \" Active Roles \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"th\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, UserManagementComponent_tr_8_Template, 8, 2, \"tr\", 4);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.users);\n      }\n    },\n    dependencies: [i3.NgForOf],\n    styles: [\".button[_ngcontent-%COMP%] {\\n    background-color: #4CAF50; \\n\\n    border: none;\\n    color: white;\\n    padding: 15px 32px;\\n    text-align: center;\\n    text-decoration: none;\\n    display: inline-block;\\n    font-size: 16px;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYWRtaW4vdXNlci1tYW5hZ2VtZW50L3VzZXItbWFuYWdlbWVudC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0kseUJBQXlCLEVBQUUsVUFBVTtJQUNyQyxZQUFZO0lBQ1osWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLHFCQUFxQjtJQUNyQixlQUFlO0VBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiLmJ1dHRvbiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNENBRjUwOyAvKiBHcmVlbiAqL1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgcGFkZGluZzogMTVweCAzMnB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gIH0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["RolesModalComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","UserManagementComponent_tr_8_Template_button_click_6_listener","restoredCtx","ɵɵrestoreView","_r3","user_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","openRolesModal","ɵɵadvance","ɵɵtextInterpolate","username","ɵɵtextInterpolate1","roles","UserManagementComponent","constructor","adminService","modalService","ngOnInit","getUsersWithRoles","getUserWithRoles","subscribe","users","user","config","class","initialState","getRolesArray","bsModalRef","show","content","updateSelectedRoles","values","rolesToUpdate","filter","el","checked","map","name","updateUserRoles","userRoles","availableRoles","value","forEach","role","isMatch","userRole","push","_","ɵɵdirectiveInject","i1","AdminService","i2","BsModalService","_2","selectors","decls","vars","consts","template","UserManagementComponent_Template","rf","ctx","ɵɵelement","ɵɵtemplate","UserManagementComponent_tr_8_Template","ɵɵproperty"],"sources":["C:\\Users\\BongumusaN\\TestingApp\\client\\src\\app\\admin\\user-management\\user-management.component.ts","C:\\Users\\BongumusaN\\TestingApp\\client\\src\\app\\admin\\user-management\\user-management.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { RolesModalComponent } from 'src/app/modals/roles-modal/roles-modal.component';\r\nimport { User } from 'src/app/_models/user';\r\nimport { AdminService } from 'src/app/_services/admin.service';\r\n\r\n@Component({\r\n  selector: 'app-user-management',\r\n  templateUrl: './user-management.component.html',\r\n  styleUrls: ['./user-management.component.css']\r\n})\r\nexport class UserManagementComponent implements OnInit {\r\n  users: Partial<User[]>;\r\nbsModalRef: BsModalRef;\r\n\r\n  constructor(private adminService: AdminService, private modalService: BsModalService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getUsersWithRoles();\r\n  }\r\n\r\n\r\n  getUsersWithRoles() {\r\n    this.adminService.getUserWithRoles().subscribe(users => {\r\n      this.users = users;\r\n    })\r\n  }\r\n\r\n  openRolesModal(user: User){\r\n\r\n      const config ={\r\n        class: 'modal-dialog-centered',\r\n        initialState: {\r\n          user,\r\n          roles: this.getRolesArray(user)\r\n\r\n        }\r\n      }\r\n    ;\r\n    this.bsModalRef = this.modalService.show(RolesModalComponent, config);\r\n    this.bsModalRef.content.updateSelectedRoles.subscribe(values =>{\r\n      const rolesToUpdate ={\r\n        roles: [...values.filter(el => el.checked === true).map(el => el.name)]\r\n      };\r\n\r\n      if(rolesToUpdate){\r\n        this.adminService.updateUserRoles(user.username, rolesToUpdate.roles).subscribe(()=>{\r\n          user.roles = [...rolesToUpdate.roles]\r\n        }\r\n        )\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  private getRolesArray(user: User){\r\nconst roles =[];\r\nconst userRoles = user.roles;\r\nconst availableRoles: any[] =[\r\n  {name: 'Admin', value: 'Admin'},\r\n  {name: 'Moderator', value: 'Moderator'},\r\n  {name: 'Member', value: 'Member'},\r\n];\r\n\r\navailableRoles.forEach(role =>{\r\n  let isMatch = false;\r\n  for (const userRole of userRoles){\r\n    if(role.name === userRole){\r\n      isMatch = true;\r\n      role.checked = true;\r\n      roles.push(role);\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!isMatch){\r\n    role.checked = false;\r\n    roles.push(role);\r\n  }\r\n})\r\n\r\nreturn roles;\r\n  }\r\n}\r\n","<div class=\"row\">\r\n    <table class=\"table\">\r\n        <tr>\r\n            <th style=\"width: 30%;\">\r\n                Username\r\n            </th>\r\n            <th style=\"width: 40%;\">\r\n                Active Roles\r\n            </th>\r\n            <th style=\"width: 30%;\">\r\n               \r\n            </th>\r\n        </tr>\r\n<tr *ngFor=\"let user of users\">\r\n<td>{{user.username}}</td>\r\n<td> {{user.roles}}</td>\r\n\r\n<td><button  (click)=\"openRolesModal(user)\"  class=\"btn btn-info\">Edit Roles</button></td>\r\n     \r\n    </table>\r\n\r\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}